1.变量名字与内存之间的关联并不是硬件所提供的，他是由编译器为我们实现的。但硬件仍然通过地址来访问内存位置。

2.不能简单的通过一个值的位数来判断它的类型。
	01100111011011000110111101100010:1个32位整数；2个16位整数；4个字符等等

3.在对指针进行间接访问之前，必须确保它们已经被初始化！

4.如果你已经知道指针将被初始化为什么地址，就把它初始化为该地址，否则就把它初始化为NULL。

5.风格良好的程序会在解引用操作之前对指针进行检查。

6.声明如下：char ch = 'a'; char *cp = &ch;
	表达式                左值					        右值
	  ch            该变量的内存地址     该变量存储的数值 
	 &ch 				         illegal 				    变量ch的值
    cp            该变量的内存地址        变量ch的地址
   &cp                 illegal         指向变量ch的指针的指针
   *cp              变量ch的地址          变量ch的值
  *cp+1                illegal           ch值的拷贝加1
  *(cp+1)    ch后一个内存位置的地址   ch后一个内存位置中的值
   ++cp                illegal        cp一份拷贝指向ch后一个内存
   cp++                illegal          cp的一份拷贝指向ch
  *++cp      ch后一个内存地址的本身   ch后一个内存地址的值
  *cp++           变量ch的内存位置         变量ch的值
  ++*cp                illegal          变量ch增值后的一份拷贝
PS：①后缀++操作符的优先级高于*操作符；
    ②++操作符得到的表达式结果均是操作数的一份拷贝；
    ③++操作符和*操作符的结合性都是从左到右。
7.指针+(或-)整数：这种形式只能用于指向数组中某个元素的指针。
  指针-指针：只有当两个指针指向同一个数组中的元素时，才允许一个指针减去另一个指针。其结果的类型是ptrdiff_t(有符号整数类型)，值为两个指针之间的距离。

8.标准允许指向数组元素的指针与指向数组最后一个元素后面的那个内存位置的指针进行比较，但不允许与指向数组第一个元素之前的那个内存位置进行比较。
