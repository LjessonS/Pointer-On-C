1.右移位操作存在两种情况：逻辑移位和算术移位。
	逻辑移位：左边移入的位用0填充；
	算术移位：左边移入的位由原先该值的符号位决定。

2.a << -5：并不表示右移5位，取决于具体的机器。

3.如果移位的位数比操作数的位数还要多，这种行为是未定义的，由编译器决定。

4.  char ch;
	...
	while((ch = getchar()) != EOF)...
	EOF所需的位数比字符型值所能提供的位数要多，这也是getchar()返回一个整型值而不是字符型值的原因。所以把getchar的返回值存在ch中将导致它被截断。

5.当sizeof的操作数是数组名的时候，它将返回该数组的长度，以字节为单位。

6.->操作符用于访问一个结构的成员。如果s是个结构变量，那么s.a就是访问s中名为a的变量。
  当你拥有一个指向结构的指针而不是结构本身，且欲访问它的成员，就需要使用->而不是.。

7.并不是只有变量可以作为左值(左值意味着一个位置，右值意味着一个值)。

8.前缀形式在操作数的值被修改之后才返回这个值，而后缀形式在操作数的值被修改之前就返回这个值。

9.  int a = 20;
	if(1 <= a <= 10)...
	1 <= a :true, 1 <= 10 :true.